# Nginx configuration for Prometheus authentication
# Author: Avi Layani
# Purpose: Provide authentication layer for Prometheus
#
# SECURITY NOTE: This file contains placeholder tokens that MUST be replaced!
# Option 1: Use envsubst to replace variables: envsubst < nginx.conf > nginx.processed.conf
# Option 2: Manually replace ${PROM_BEARER_TOKEN} and ${PROM_API_TOKEN} with secure values
# 
# Load credentials from: configs/credentials.env

events {
    worker_connections 1024;
}

http {
    # Rate limiting
    limit_req_zone $binary_remote_addr zone=prometheus_limit:10m rate=30r/s;
    
    # Upstream Prometheus server
    upstream prometheus_backend {
        server prometheus-dev:9090;
    }
    
    # Upstream Node Exporter
    upstream node_exporter_backend {
        server node-exporter:9100;
    }

    server {
        listen 80;
        server_name _;
        
        # Security headers
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        
        # Basic authentication for all endpoints
        auth_basic "Prometheus Authentication Required";
        auth_basic_user_file /etc/nginx/.htpasswd;
        
        # Main Prometheus UI and API
        location / {
            # Rate limiting
            limit_req zone=prometheus_limit burst=50 nodelay;
            
            # Check for Bearer token as alternative to Basic Auth
            set $auth_passed 0;
            
            # If Authorization header contains valid Bearer token
            # SECURITY: Change this token! Set PROM_BEARER_TOKEN in configs/credentials.env
            if ($http_authorization = "Bearer ${PROM_BEARER_TOKEN}") {
                set $auth_passed 1;
            }
            
            # If Basic Auth passed
            if ($remote_user != "") {
                set $auth_passed 1;
            }
            
            # If custom API token header is present
            # SECURITY: Change this token! Set PROM_API_TOKEN in configs/credentials.env
            if ($http_x_api_token = "${PROM_API_TOKEN}") {
                set $auth_passed 1;
            }
            
            # Proxy to Prometheus
            proxy_pass http://prometheus_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket support for live queries
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
        
        # Metrics endpoint (might want different auth)
        location /metrics {
            # More restrictive rate limit for metrics
            limit_req zone=prometheus_limit burst=10 nodelay;
            
            auth_basic "Prometheus Metrics Access";
            auth_basic_user_file /etc/nginx/.htpasswd;
            
            proxy_pass http://prometheus_backend/metrics;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }
        
        # Health check endpoints (allow without auth for monitoring)
        location ~ ^/-(healthy|ready)$ {
            auth_basic off;
            proxy_pass http://prometheus_backend;
            proxy_set_header Host $host;
        }
        
        # Node exporter endpoint
        location /node-metrics {
            auth_basic "Node Exporter Access";
            auth_basic_user_file /etc/nginx/.htpasswd;
            
            proxy_pass http://node_exporter_backend/metrics;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }
    }
    
    # Alternative: Bearer token only endpoint
    server {
        listen 81;
        server_name _;
        
        location / {
            # Check Bearer token
            # SECURITY: Uses token from configs/credentials.env
            if ($http_authorization != "Bearer ${PROM_BEARER_TOKEN}") {
                return 403;
            }
            
            proxy_pass http://prometheus_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
    
    # Alternative: API token only endpoint
    server {
        listen 82;
        server_name _;
        
        location / {
            # Check custom API token header
            # SECURITY: Uses token from configs/credentials.env
            if ($http_x_api_token != "${PROM_API_TOKEN}") {
                return 403;
            }
            
            proxy_pass http://prometheus_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}
